= Road to RubyKaigi:\nMaking Tinny Chiptunes with Ruby

: author
   @makicamel

: content-source
   RubyKaigi 2025

:date
   2025.04.17

:theme
   theme

= Self Introduction

  * @makicamel / Maki Kawahara
  * Loves Ruby üíé, beer üçª, and alcoholic drinks
  * AndPad Inc.
  * Creater of "Road to RubyKaigi"

  # image
  # src = image/makicamel.png
  # relative_width = 10
  # align = right
  # vertical_align = top
  # relative_margin_right = 0
  # relative_margin_top = 0

= Road to RubyKaigi
„ÄÄ
  # image
  # src = image/road_to_rubykaigi-github.png
  # relative_height = 100
  # align = center
  # vertical_align = top
  # relative_margin_right = 0
  # relative_margin_top = -8

(('tag:xx-small:„ÄÄ„ÄÄRoad to RubyKaigi„ÄÄ'))((<URL:https://github.com/makicamel/road_to_rubykaigi>))

= Road to RubyKaigi

  * A Ruby-made game by Rubyist for Rubyists
  * A side-scrolling action game played in the terminal
  * Defeat bugs and escape deadlines to reach RubyKaigi venue
  * `gem install road_to_rubykaigi`

= Road to RubyKaigi

  * Gameplay Video

  # image
  # src = image/play-video.gif
  # relative_height = 100
  # align = center
  # vertical_align = middle

= Road to RubyKaigi

  * Something is missing...
  * (('wait')) Music!

= Music

  * macOS does not have a built-in active sound source by default
    * The user must adjust system settings
    * Inconvenient

= A Haiku Here
„ÄÄ
= A Haiku Here

  # image
  # src = image/haiku.png
  # relative_height = 92
  # align = center
  # vertical_align = middle

= Making Music

  * Sound is a wave

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveform-example.png
: background-image-relative-width
   90
: background-image-vertical-align
   top
: background-image-relative-margin-top
   40

= Making Music

  * A sound source creates the waves
    * Ruby is the sound source

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveform-example.png
: background-image-relative-width
   90
: background-image-vertical-align
   top
: background-image-relative-margin-top
   40

= Making Music

  * Devices that output the created wave
    * Audio devices
      * e.g. Speakers, Headphones

= Making Music

  * Audio device I/O APIs
    * macOS
      * Core Audio
    * Windows
      * Windows Audio Session API
    * Linux
      * Advanced Linux Sound Architecture

  # image
  # src = image/fukidashi-multi-platforms.png
  # relative_width = 30
  # align = right
  # vertical_align = bottom
  # relative_margin_top = 12

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/makicamel.png
: background-image-relative-width
   9
: background-image-align
   right
: background-image-vertical-align
   bottom
: background-image-relative-margin-right
   6

= Making Music

* A cross-platform library that provides audio I/O APIs
  * PortAudio ((<URL:https://github.com/PortAudio/portaudio>))
* (('wait')) The Ruby binding for PortAudio
  * ffi-portaudio ((<URL:https://github.com/nanki/ffi-portaudio>))

= Making Music

  (1) Create a wave (audio data)
  (2) Pass it to ffi-portaudio
      * Output it through PortAudio to an audio device
  (3) Play sound with Ruby!

  # image
  # src = image/fukidashi-music.png
  # relative_width = 30
  # align = right
  # vertical_align = bottom
  # relative_margin_top = 12

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/makicamel.png
: background-image-relative-width
   9
: background-image-align
   right
: background-image-vertical-align
   bottom
: background-image-relative-margin-right
   6

= „ÄÄ
„ÄÄ
== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/wave.jpg
: background-image-relative-width
   100
: background-image-align
   center
: background-image-vertical-align
   bottom
: background-image-relative-margin-top
   6

= Basics of Creating Waves

  * "Sound is a wave"
    * What does it mean?

= Basics of Creating Waves

  * Representative waveforms
    * Sine wave
    * Square wave
    * Triangle wave
    * Sawtooth wave

\n\n\n
(('tag:xx-small:„ÄÄ„ÄÄSquare wave (waveform)„ÄÄ'))((<URL:https://en.wikipedia.org/wiki/Square_wave_(waveform)>))

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveforms-wiki.png
: background-image-relative-height
   68
: background-image-align
   right
: background-image-vertical-align
   middle
: background-image-relative-margin-right
   2

= Basics of Creating Waves

  * Periodic
    * The changes in signal\namplitude follow\na repeating pattern
  * Frequency
    * Number of cycles per second
      * e.g. 444.0Hz
        * Repeat 440 cycles per second

  # image
  # src = image/waveforms-wiki-cycle.png
  # relative_height = 84
  # align = right
  # vertical_align = top
  # relative_margin_right = 34
  # relative_padding_top = -4

(('tag:xx-small:„ÄÄ„ÄÄSquare wave (waveform)„ÄÄ'))((<URL:https://en.wikipedia.org/wiki/Square_wave_(waveform)>))

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveforms-wiki.png
: background-image-relative-height
   68
: background-image-align
   right
: background-image-vertical-align
   middle
: background-image-relative-margin-right
   2

= Basics of Creating Waves

  * Period
    * The time it takes for one cycle

  # image
  # src = image/waveforms-wiki-cycle.png
  # relative_height = 84
  # align = right
  # vertical_align = top
  # relative_margin_right = 34
  # relative_padding_top = -4

\n\n\n\n\n\n\n
(('tag:xx-small:„ÄÄ„ÄÄSquare wave (waveform)„ÄÄ'))((<URL:https://en.wikipedia.org/wiki/Square_wave_(waveform)>))

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveforms-wiki.png
: background-image-relative-height
   68
: background-image-align
   right
: background-image-vertical-align
   middle
: background-image-relative-margin-right
   2

= Basics of Creating Waves

  * Analog
    * The amplitude of a wave changes continuously within a cycle
  * Digital
    * A continuous signal amplitude cannot be recorded
    * Instead, record so that it appears continuous\na fixed number of samples
      * This number is "sample rate"
    * Sample rate
      * The number of samples per second

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveform-dac.png
: background-image-relative-width
   50
: background-image-align
   right
: background-image-vertical-align
   bottom
: background-image-relative-margin-right
   2
: background-image-relative-padding-bottom
   4

= Basics of Creating Waves

  * How to generate waves
    * Just collect the changes in the signal and repeats them

= „ÄÄ
„ÄÄ
== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/wave2.jpg
: background-image-relative-width
   100
: background-image-align
   center
: background-image-vertical-align
   bottom
: background-image-relative-margin-top
   10

= Practical Approach to Creating Waves

  * Generate the "pico-pico" sound like the NES
  * The waveforms generated by the NES
    * Square wave
    * Triangle wave
  * In this talk, we focus on square waves

= Creating Waves: Square Wave

  * Only two values
    * 1 and -1
  * The typical "pico-pico" sound

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveform-square.png
: background-image-relative-width
   68
: background-image-align
   center
: background-image-vertical-align
   middle
: background-image-relative-margin-top
   12

= Creating Waves: Square Wave

  * The first half of a cycle is 1
  * The second half is -1

  # image
  # src = image/fukidashi-easy.png
  # relative_width = 30
  # align = right
  # vertical_align = bottom
  # relative_margin_top = 12

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/makicamel.png
: background-image-relative-width
   9
: background-image-align
   right
: background-image-vertical-align
   bottom
: background-image-relative-margin-right
   6

= Creating Waves: Square Wave

  * Frequency
    * The number of cycles per second
    * Time per sample: 1 second / sample rate
    * Increment in current phase per sample: frequency / sample rate

  # rouge ruby
    class SquareOscillator
      def tick(frequency:)
          @phase += frequency.to_f / sample_rate
          @phase -= 1.0 if @phase >= 1.0 # Phase is managed from 0 to 1, reset when reaching 1
          @phase
      end

= Creating Waves: Square Wave

  * Waveform generation

      # rouge ruby
        class SquareOscillator
            # ...
            def generate(frequency:)
                # Get the current phase within the cycle
                phase = tick(frequency: frequency)
                # 1 if in the first half, -1 if in the second half
                phase < 0.5 ? 1.0 : -1.0
            end
        end

  * Collecting samples produces a square wave

= Creating Waves: Square Wave

  * Passing to PortAudio

      # rouge ruby
      class AudioEngine < FFI::PortAudio::Stream
          def process(_input, output, framesPerBuffer, _timeInfo, _statusFlags, _userData)
              samples = (0...framesPerBuffer).map { @oscillator.generate(frequency:) }
              output.write_array_of_float(samples)
              :paContinue
          end
      # ...
  * (('wait')) The sound plays! üéâ
„ÄÄ
= Creating Waves: Square Wave

  * Waveform output from the audio device

  # image
  # src = image/waveform-square-1.png
  # relative_width = 80
  # align = right
  # vertical_align = middle

= Creating Waves: Square Wave

  * Waveform output from the audio device

  # image
  # src = image/waveform-square-2.png
  # relative_width = 80
  # align = right
  # vertical_align = middle

= Creating Waves: Square Wave
„ÄÄ
  # image
  # src = image/fukidashi-noise.png
  # relative_width = 40
  # align = right
  # vertical_align = bottom
  # relative_margin_top = 12

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/makicamel.png
: background-image-relative-width
   9
: background-image-align
   right
: background-image-vertical-align
   bottom
: background-image-relative-margin-right
   6

= Advanced Creating Waves

  * Changing the signal strength abruptly generates noise
    * Many high-frequency components are produced
    * Digital-to-analog conversion

= Advanced Creating Waves

  * Noise reduction
    * Smoothing the corners
\n\n\n\n\n\n\n
(('tag:xx-small:„ÄÄ„ÄÄTo reduce noise caused by abrupt signal changes, a filter is effective'))\n
(('tag:xx-small:„ÄÄ„ÄÄbut since we want "pico-pico" sound, not adopt in this talk'))

= Advanced Creating Waves

  * When the current position in the cycle is at a sharp corner\napply weight to the signal's strength

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveform-square-2.png
: background-image-relative-width
   80
: background-image-align
   center
: background-image-vertical-align
   middle
: background-image-relative-margin-top
   12

= Advanced Creating Waves

  * When the current position in the cycle is at a sharp corner\napply weight to the signal's strength
    * Use the cosine function to draw curves like

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/waveform-square-5.png
: background-image-relative-width
   80
: background-image-align
   center
: background-image-vertical-align
   middle
: background-image-relative-margin-top
   12

= Advanced Creating Waves

  * The waveform becomes clean üôå

  # image
  # src = image/waveform-square-4.png
  # relative_height = 96
  # align = center
  # vertical_align = middle

= Making Music

  * Then, write scores

== „Éó„É≠„Éë„ÉÜ„Ç£

: background-image
   image/score.png
: background-image-relative-height
   92
: background-image-align
   center
: background-image-vertical-align
   top
: background-image-relative-margin-top
   32

= Making Music

  * Several combinations
    * Triangle wave
      * Pseudo triangle wave
    * Envelopes
    * Sound effects

= Making Music

  * Simply pass it to the API

      # rouge ruby
      class AudioEngine < FFI::PortAudio::Stream
          def process(_input, output, framesPerBuffer, _timeInfo, _statusFlags, _userData)
              samples = (0...framesPerBuffer).map { @oscillator.generate(frequency:) }
              output.write_array_of_float(samples)
              :paContinue
          end
      # ...

= Demo üîà

= Special Thanks

* @youchan

= Enjoy Creating!
